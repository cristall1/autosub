import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime
import database as db
import config

ADMIN_BOT_TOKEN = config.ADMIN_BOT_TOKEN
PRIVATE_CHANNEL_ID = config.PRIVATE_CHANNEL_ID
ADMIN_IDS = config.ADMIN_USER_IDS

bot = Bot(token=ADMIN_BOT_TOKEN)
user_sender_bot = Bot(token=config.USER_BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

logging.basicConfig(level=logging.INFO)


class AddService(StatesGroup):
    waiting_for_name = State()
    waiting_for_duration = State()
    waiting_for_unit = State()
    waiting_for_price = State()


class EditServicePrice(StatesGroup):
    waiting_for_price = State()


class EditServiceDuration(StatesGroup):
    waiting_for_duration = State()
    waiting_for_unit = State()


class RenameService(StatesGroup):
    waiting_for_name = State()


class SearchUser(StatesGroup):
    waiting_for_query = State()


class Broadcast(StatesGroup):
    waiting_for_message = State()


class DirectMessage(StatesGroup):
    waiting_for_message = State()


def get_admin_keyboard():
    """Main admin inline keyboard"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíº –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏", callback_data="manage_services")],
        [InlineKeyboardButton(text="üîé –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="search_user"),
         InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="stats")],
        [InlineKeyboardButton(text="‚úâÔ∏è –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º", callback_data="broadcast_all"),
         InlineKeyboardButton(text="üë§ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data="direct_message")],
        [InlineKeyboardButton(text="üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–∞", callback_data="diagnostics"),
         InlineKeyboardButton(text="üîî –†–µ–∂–∏–º —Ç–∏—à–∏–Ω—ã", callback_data="silent_mode")],
    ])
    return keyboard


@dp.message(Command("start"))
async def admin_start(message: types.Message, state: FSMContext):
    """Admin bot start command"""
    await state.clear()
    await message.answer(
        "üîê <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=get_admin_keyboard(),
        parse_mode="HTML"
    )


@dp.callback_query(F.data == "admin_menu")
async def back_to_admin_menu(callback: types.CallbackQuery, state: FSMContext):
    """Back to admin menu"""
    await callback.answer()
    await state.clear()
    await callback.message.edit_text(
        "üîê <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=get_admin_keyboard(),
        parse_mode="HTML"
    )


@dp.callback_query(F.data == "manage_services")
async def manage_services(callback: types.CallbackQuery, state: FSMContext):
    """Service management menu"""
    await callback.answer()
    
    services = await db.get_services()
    if services:
        header = "üíº <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏:</b>\n\n"
        for s in services:
            unit = s.get('duration_unit', 'days')
            unit_text = {"minutes": "–º–∏–Ω—É—Ç", "days": "–¥–Ω–µ–π", "months": "–º–µ—Å—è—Ü–µ–≤"}.get(unit, "–¥–Ω–µ–π")
            header += f"üëâ <b>{s['name']}</b> - {int(s['price'])} —Ä—É–±. ({s['duration_days']} {unit_text})\n"
    else:
        header = "üíº <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏:</b>\n\n–ù–µ—Ç —É—Å–ª—É–≥"
    
    buttons = [[InlineKeyboardButton(text=f"üëâ {s['name']}", callback_data=f"service_{s['id']}")] for s in services]
    buttons.append([InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É", callback_data="add_service")])
    buttons.append([InlineKeyboardButton(text="üè† –ù–∞–∑–∞–¥", callback_data="admin_menu")])
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await callback.message.edit_text(header, parse_mode="HTML", reply_markup=kb)


@dp.callback_query(F.data.startswith("service_"))
async def service_actions(callback: types.CallbackQuery, state: FSMContext):
    """Service edit menu"""
    await callback.answer()
    
    service_id = int(callback.data.replace("service_", ""))
    service = await db.get_service_by_id(service_id)
    
    if not service:
        await callback.message.edit_text("–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", reply_markup=get_admin_keyboard())
        return
    
    await state.update_data(edit_service_id=service['id'])
    
    unit = service.get('duration_unit', 'days')
    unit_text = {"minutes": "–º–∏–Ω—É—Ç", "days": "–¥–Ω–µ–π", "months": "–º–µ—Å—è—Ü–µ–≤"}.get(unit, "–¥–Ω–µ–π")
    
    actions_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", callback_data="rename_service"),
         InlineKeyboardButton(text="üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data="edit_price")],
        [InlineKeyboardButton(text="‚è± –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ä–æ–∫", callback_data="edit_duration"),
         InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É", callback_data="delete_service")],
        [InlineKeyboardButton(text="üè† –ù–∞–∑–∞–¥", callback_data="manage_services")]
    ])
    
    service_info = f"<b>{service['name']}</b>\n\n–¶–µ–Ω–∞: {service['price']} —Ä—É–±.\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {service['duration_days']} {unit_text}"
    await callback.message.edit_text(service_info, reply_markup=actions_kb, parse_mode="HTML")


@dp.callback_query(F.data == "add_service")
async def add_service_start(callback: types.CallbackQuery, state: FSMContext):
    """Start adding new service"""
    await callback.answer()
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:")
    await state.set_state(AddService.waiting_for_name)


@dp.message(AddService.waiting_for_name)
async def add_service_name(message: types.Message, state: FSMContext):
    await state.update_data(service_name=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 525600):")
    await state.set_state(AddService.waiting_for_duration)


@dp.message(AddService.waiting_for_duration)
async def add_service_duration(message: types.Message, state: FSMContext):
    try:
        duration = int(message.text.strip())
        if duration <= 0 or duration > 525600:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
        await state.update_data(service_duration=duration)
        
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ú–∏–Ω—É—Ç—ã", callback_data="unit_minutes"),
             InlineKeyboardButton(text="–î–Ω–∏", callback_data="unit_days")],
            [InlineKeyboardButton(text="–ú–µ—Å—è—Ü—ã", callback_data="unit_months")],
            [InlineKeyboardButton(text="üè† –ù–∞–∑–∞–¥", callback_data="manage_services")]
        ])
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è:", reply_markup=kb)
        await state.set_state(AddService.waiting_for_unit)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")


@dp.callback_query(F.data.startswith("unit_"), AddService.waiting_for_unit)
async def add_service_unit(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    
    unit_map = {"unit_minutes": "minutes", "unit_days": "days", "unit_months": "months"}
    unit = unit_map.get(callback.data)
    
    if not unit:
        return
    
    await state.update_data(service_unit=unit)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å (–≤ —Ä—É–±–ª—è—Ö):")
    await state.set_state(AddService.waiting_for_price)


@dp.message(AddService.waiting_for_price)
async def add_service_price(message: types.Message, state: FSMContext):
    try:
        price = float(message.text.strip().replace(',', '.'))
        if price <= 0:
            raise ValueError("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        
        data = await state.get_data()
        name = data.get("service_name")
        duration = data.get("service_duration")
        unit = data.get("service_unit", "days")
        
        await db.add_service(name, duration, price, unit)
        
        unit_text = {"minutes": "–º–∏–Ω—É—Ç", "days": "–¥–Ω–µ–π", "months": "–º–µ—Å—è—Ü–µ–≤"}.get(unit, "–¥–Ω–µ–π")
        
        await message.answer(
            f"‚úÖ –£—Å–ª—É–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞:\n\n"
            f"<b>{name}</b>\n"
            f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} {unit_text}\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {price} —Ä—É–±.",
            reply_markup=get_admin_keyboard(),
            parse_mode="HTML"
        )
        await state.clear()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É.")


@dp.callback_query(F.data == "rename_service")
async def rename_service_start(callback: types.CallbackQuery, state: FSMContext):
    """Start renaming service"""
    await callback.answer()
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
    await state.set_state(RenameService.waiting_for_name)


@dp.message(RenameService.waiting_for_name)
async def rename_service_finish(message: types.Message, state: FSMContext):
    data = await state.get_data()
    service_id = data.get('edit_service_id')
    if not service_id:
        await message.answer("–û—à–∏–±–∫–∞: —É—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", reply_markup=get_admin_keyboard())
        await state.clear()
        return
    
    await db.update_service_name(service_id, message.text.strip())
    await message.answer("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=get_admin_keyboard())
    await state.clear()


@dp.callback_query(F.data == "edit_price")
async def edit_price_start(callback: types.CallbackQuery, state: FSMContext):
    """Start editing service price"""
    await callback.answer()
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É (–≤ —Ä—É–±–ª—è—Ö):")
    await state.set_state(EditServicePrice.waiting_for_price)


@dp.message(EditServicePrice.waiting_for_price)
async def edit_price_finish(message: types.Message, state: FSMContext):
    try:
        price = float(message.text.strip().replace(',', '.'))
        if price <= 0:
            raise ValueError("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        
        data = await state.get_data()
        service_id = data.get('edit_service_id')
        if not service_id:
            await message.answer("–û—à–∏–±–∫–∞: —É—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", reply_markup=get_admin_keyboard())
            await state.clear()
            return
        
        await db.update_service_price(service_id, price)
        await message.answer(f"‚úÖ –¶–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {price} —Ä—É–±.", reply_markup=get_admin_keyboard())
        await state.clear()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É.")


@dp.callback_query(F.data == "edit_duration")
async def edit_duration_start(callback: types.CallbackQuery, state: FSMContext):
    """Start editing service duration"""
    await callback.answer()
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—á–∏—Å–ª–æ):")
    await state.set_state(EditServiceDuration.waiting_for_duration)


@dp.message(EditServiceDuration.waiting_for_duration)
async def edit_duration_value(message: types.Message, state: FSMContext):
    try:
        duration = int(message.text.strip())
        if duration <= 0:
            raise ValueError("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        await state.update_data(new_duration=duration)
        
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ú–∏–Ω—É—Ç—ã", callback_data="unit_minutes"),
             InlineKeyboardButton(text="–î–Ω–∏", callback_data="unit_days")],
            [InlineKeyboardButton(text="–ú–µ—Å—è—Ü—ã", callback_data="unit_months")],
            [InlineKeyboardButton(text="üè† –ù–∞–∑–∞–¥", callback_data="admin_menu")]
        ])
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è:", reply_markup=kb)
        await state.set_state(EditServiceDuration.waiting_for_unit)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")


@dp.callback_query(F.data.startswith("unit_"), EditServiceDuration.waiting_for_unit)
async def edit_duration_unit(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    
    unit_map = {"unit_minutes": "minutes", "unit_days": "days", "unit_months": "months"}
    unit = unit_map.get(callback.data)
    
    if not unit:
        return
    
    data = await state.get_data()
    service_id = data.get('edit_service_id')
    duration = data.get('new_duration')
    
    if not service_id:
        await callback.message.edit_text("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID —É—Å–ª—É–≥–∏", reply_markup=get_admin_keyboard())
        await state.clear()
        return
    
    await db.update_service_duration(service_id, duration, unit)
    
    unit_text_display = {"minutes": "–º–∏–Ω—É—Ç", "days": "–¥–Ω–µ–π", "months": "–º–µ—Å—è—Ü–µ–≤"}.get(unit, "–¥–Ω–µ–π")
    await callback.message.edit_text(
        f"‚úÖ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {duration} {unit_text_display}",
        reply_markup=get_admin_keyboard()
    )
    await state.clear()


@dp.callback_query(F.data == "delete_service")
async def delete_service_confirm(callback: types.CallbackQuery, state: FSMContext):
    """Confirm service deletion"""
    await callback.answer()
    
    data = await state.get_data()
    service_id = data.get('edit_service_id')
    if not service_id:
        await callback.message.edit_text("–û—à–∏–±–∫–∞: —É—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", reply_markup=get_admin_keyboard())
        return
    
    await db.delete_service(service_id)
    await callback.message.edit_text("‚úÖ –£—Å–ª—É–≥–∞ —É–¥–∞–ª–µ–Ω–∞.", reply_markup=get_admin_keyboard())
    await state.clear()


@dp.callback_query(F.data == "search_user")
async def search_user_start(callback: types.CallbackQuery, state: FSMContext):
    """Start user search"""
    await callback.answer()
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ username –¥–ª—è –ø–æ–∏—Å–∫–∞ (–±–µ–∑ @):")
    await state.set_state(SearchUser.waiting_for_query)


@dp.message(SearchUser.waiting_for_query)
async def search_user_query(message: types.Message, state: FSMContext):
    """Handle search query"""
    query = message.text.strip().lstrip('@')
    results = await db.search_users_by_username(query, limit=20)
    
    if not results:
        await message.answer("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.", reply_markup=get_admin_keyboard())
        await state.clear()
        return
    
    buttons = []
    for u in results:
        username = u['username'] or f"id{u['user_id']}"
        status = "‚úÖ" if u['is_active'] else "‚ùå"
        buttons.append([InlineKeyboardButton(text=f"{status} @{username}", callback_data=f"userprofile_{u['user_id']}")])
    
    buttons.append([InlineKeyboardButton(text="üè† –ù–∞–∑–∞–¥", callback_data="admin_menu")])
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=kb)
    await state.clear()


@dp.callback_query(F.data.startswith("userprofile_"))
async def show_user_profile(callback: types.CallbackQuery, state: FSMContext):
    """Show user profile with photo"""
    await callback.answer()
    
    user_id = int(callback.data.replace("userprofile_", ""))
    user = await db.get_user(user_id)
    
    if not user:
        await callback.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_admin_keyboard())
        return
    
    username = user['username'] or f"id{user_id}"
    phone = user['phone_number'] or "‚Äî"
    status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if user['is_active'] else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
    
    if user['subscription_end']:
        end_date = datetime.fromisoformat(user['subscription_end'])
        end_str = end_date.strftime("%d.%m.%Y %H:%M")
    else:
        end_str = "‚Äî"
    
    caption = (
        f"üë§ <b>@{username}</b>\n\n"
        f"üÜî ID: {user_id}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
        f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {end_str}"
    )
    
    back_kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üè† –ù–∞–∑–∞–¥", callback_data="admin_menu")]])
    
    if user.get('photo_file_id'):
        await callback.message.delete()
        await bot.send_photo(
            callback.message.chat.id,
            user['photo_file_id'],
            caption=caption,
            parse_mode="HTML",
            reply_markup=back_kb
        )
    else:
        await callback.message.edit_text(caption + "\n\nüì∑ –ù–µ—Ç —Ñ–æ—Ç–æ", parse_mode="HTML", reply_markup=back_kb)


@dp.callback_query(F.data == "stats")
async def users_stats(callback: types.CallbackQuery, state: FSMContext):
    """Show paginated users list"""
    await callback.answer()
    await state.update_data(stats_offset=0)
    await send_users_page(callback.message, state, edit=True)


async def send_users_page(message: types.Message, state: FSMContext, edit: bool = False):
    """Send paginated users list"""
    data = await state.get_data()
    offset = data.get("stats_offset", 0)
    page = await db.get_users_paginated(offset=offset, limit=10)
    
    if not page:
        text = "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."
        kb = get_admin_keyboard()
        if edit:
            await message.edit_text(text, reply_markup=kb)
        else:
            await message.answer(text, reply_markup=kb)
        await state.clear()
        return
    
    lines = ["üìä <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"]
    for u in page:
        username = u['username'] or f"id{u['user_id']}"
        status = '‚úÖ' if u['is_active'] else '‚ùå'
        end_str = datetime.fromisoformat(u['subscription_end']).strftime('%d.%m') if u['subscription_end'] else '‚Äî'
        lines.append(f"{status} @{username} –¥–æ {end_str}")
    
    controls = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data="stats_prev"),
         InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è", callback_data="stats_next")],
        [InlineKeyboardButton(text="üè† –ù–∞–∑–∞–¥", callback_data="admin_menu")]
    ])
    
    text = "\n".join(lines)
    if edit:
        await message.edit_text(text, reply_markup=controls, parse_mode="HTML")
    else:
        await message.answer(text, reply_markup=controls, parse_mode="HTML")


@dp.callback_query(F.data.in_({"stats_prev", "stats_next"}))
async def stats_pagination(callback: types.CallbackQuery, state: FSMContext):
    """Handle stats pagination"""
    await callback.answer()
    
    data = await state.get_data()
    offset = data.get("stats_offset", 0)
    
    if callback.data == "stats_next":
        offset += 10
    else:
        offset = max(0, offset - 10)
    
    await state.update_data(stats_offset=offset)
    await send_users_page(callback.message, state, edit=True)


@dp.callback_query(F.data == "broadcast_all")
async def broadcast_all_start(callback: types.CallbackQuery, state: FSMContext):
    """Start broadcast to all users"""
    await callback.answer()
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:")
    await state.update_data(broadcast_all=True)
    await state.set_state(Broadcast.waiting_for_message)


@dp.message(Broadcast.waiting_for_message)
async def broadcast_send_all(message: types.Message, state: FSMContext):
    """Send broadcast to all users"""
    text = message.text
    users = await db.get_all_users()
    sent = 0
    
    for u in users:
        try:
            await user_sender_bot.send_message(
                u['user_id'],
                text,
                disable_notification=getattr(config, "SILENT_MODE", False)
            )
            sent += 1
            await asyncio.sleep(0.05)  # Anti-flood
        except Exception as e:
            logging.error(f"Broadcast failed to {u['user_id']}: {e}")
    
    await message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}", reply_markup=get_admin_keyboard())
    await state.clear()


@dp.callback_query(F.data == "direct_message")
async def direct_message_start(callback: types.CallbackQuery, state: FSMContext):
    """Start direct message to user"""
    await callback.answer()
    
    users = await db.get_all_users()
    if not users:
        await callback.message.edit_text("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.", reply_markup=get_admin_keyboard())
        return
    
    await state.update_data(dm_offset=0)
    await send_user_selection_page(callback.message, state, edit=True)


async def send_user_selection_page(message: types.Message, state: FSMContext, edit: bool = False):
    """Send user selection page for DM"""
    data = await state.get_data()
    offset = data.get("dm_offset", 0)
    users = await db.get_users_paginated(offset=offset, limit=10)
    
    if not users:
        kb = get_admin_keyboard()
        text = "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
        if edit:
            await message.edit_text(text, reply_markup=kb)
        else:
            await message.answer(text, reply_markup=kb)
        await state.clear()
        return
    
    buttons = []
    for u in users:
        username = u['username'] or f"id{u['user_id']}"
        status = "‚úÖ" if u['is_active'] else "‚ùå"
        buttons.append([InlineKeyboardButton(text=f"{status} @{username}", callback_data=f"dm_{u['user_id']}")])
    
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥", callback_data="dm_prev"),
                    InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥", callback_data="dm_next")])
    buttons.append([InlineKeyboardButton(text="üè† –ù–∞–∑–∞–¥", callback_data="admin_menu")])
    
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
    if edit:
        await message.edit_text(text, reply_markup=kb)
    else:
        await message.answer(text, reply_markup=kb)


@dp.callback_query(F.data.in_({"dm_prev", "dm_next"}))
async def dm_pagination(callback: types.CallbackQuery, state: FSMContext):
    """Handle DM user selection pagination"""
    await callback.answer()
    
    data = await state.get_data()
    offset = data.get("dm_offset", 0)
    
    if callback.data == "dm_next":
        offset += 10
    else:
        offset = max(0, offset - 10)
    
    await state.update_data(dm_offset=offset)
    await send_user_selection_page(callback.message, state, edit=True)


@dp.callback_query(F.data.startswith("dm_"))
async def direct_message_user_selected(callback: types.CallbackQuery, state: FSMContext):
    """Handle user selection for DM"""
    await callback.answer()
    
    if callback.data in {"dm_prev", "dm_next"}:
        return
    
    user_id = int(callback.data.replace("dm_", ""))
    user = await db.get_user(user_id)
    
    if not user:
        await callback.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_admin_keyboard())
        return
    
    username = user['username'] or f"id{user_id}"
    await state.update_data(dm_target_user_id=user_id)
    await callback.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è @{username}:")
    await state.set_state(DirectMessage.waiting_for_message)


@dp.message(DirectMessage.waiting_for_message)
async def direct_message_send(message: types.Message, state: FSMContext):
    """Send direct message to user"""
    data = await state.get_data()
    user_id = data.get('dm_target_user_id')
    
    if not user_id:
        await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=get_admin_keyboard())
        await state.clear()
        return
    
    try:
        await user_sender_bot.send_message(
            user_id,
            message.text,
            disable_notification=getattr(config, "SILENT_MODE", False)
        )
        await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.", reply_markup=get_admin_keyboard())
    except Exception as e:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {e}", reply_markup=get_admin_keyboard())
    
    await state.clear()


@dp.callback_query(F.data == "diagnostics")
async def channel_diagnostics(callback: types.CallbackQuery):
    """Perform channel diagnostics"""
    await callback.answer()
    
    issues = []
    
    try:
        me = await bot.get_me()
        issues.append(f"‚úÖ –ë–æ—Ç: @{me.username}")
    except Exception as e:
        issues.append(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –±–æ—Ç–∞: {e}")
    
    await callback.message.edit_text("\n".join(issues), reply_markup=get_admin_keyboard())


@dp.callback_query(F.data == "silent_mode")
async def silent_mode_status(callback: types.CallbackQuery):
    """Show silent mode status"""
    await callback.answer()
    status = "‚úÖ –í–∫–ª—é—á–µ–Ω" if getattr(config, 'SILENT_MODE', False) else "‚ùå –í—ã–∫–ª—é—á–µ–Ω"
    await callback.message.edit_text(f"–†–µ–∂–∏–º —Ç–∏—à–∏–Ω—ã: {status}", reply_markup=get_admin_keyboard())


@dp.callback_query(F.data.startswith("approve_"))
async def approve_purchase(callback: types.CallbackQuery):
    """Approve purchase request - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    await callback.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
    
    purchase_id = int(callback.data.replace("approve_", ""))
    purchase = await db.get_pending_purchase(purchase_id)
    
    if not purchase:
        await callback.message.edit_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    service = await db.get_service_by_id(purchase['service_id'])
    if not service:
        await callback.message.edit_text("‚ùå –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # 1. –ê–ö–¢–ò–í–ò–†–£–ï–ú –ü–û–î–ü–ò–°–ö–£ –í –ë–î
    try:
        end_date = await db.activate_user_subscription(
            purchase['user_id'],
            purchase['username'],
            purchase['phone_number'],
            service['duration_days'],
            service.get('duration_unit', 'days')
        )
        logging.info(f"‚úÖ Subscription activated for user {purchase['user_id']} until {end_date}")
    except Exception as e:
        logging.error(f"‚ùå Failed to activate subscription: {e}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return
    
    # 2. –°–û–ó–î–ê–ï–ú –ü–ï–†–°–û–ù–ê–õ–¨–ù–£–Æ –°–°–´–õ–ö–£ –ù–ê –ö–ê–ù–ê–õ
    invite_link = None
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞
        me = await bot.get_me()
        member = await bot.get_chat_member(PRIVATE_CHANNEL_ID, me.id)
        
        if member.status != "administrator" or not member.can_invite_users:
            raise Exception("‚ö†Ô∏è –ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!")
        
        # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—É—é —Å—Å—ã–ª–∫—É
        invite = await bot.create_chat_invite_link(
            chat_id=PRIVATE_CHANNEL_ID,
            member_limit=1,  # –û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è —Å—Å—ã–ª–∫–∞
            name=f"–ü–æ–¥–ø–∏—Å–∫–∞ {purchase['username']}"
        )
        invite_link = invite.invite_link
        
        await db.mark_user_added_to_channel(purchase['user_id'])
        logging.info(f"‚úÖ Invite link created for user {purchase['user_id']}")
        
    except Exception as e:
        logging.error(f"‚ùå Failed to create invite link: {e}")
        await callback.message.edit_text(
            f"‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞, –Ω–æ –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏:\n{e}\n\n"
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ —á–µ—Ä–µ–∑ /start ‚Üí –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"
        )
        return
    
    # 3. –ú–ì–ù–û–í–ï–ù–ù–û –û–¢–ü–†–ê–í–õ–Ø–ï–ú –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ
    try:
        unit = service.get('duration_unit', 'days')
        unit_text = {"minutes": "–º–∏–Ω—É—Ç", "days": "–¥–Ω–µ–π", "months": "–º–µ—Å—è—Ü–µ–≤"}.get(unit, "–¥–Ω–µ–π")
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîó –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–∞–Ω–∞–ª—É", url=invite_link)]
        ])
        
        await user_sender_bot.send_message(
            purchase['user_id'],
            f"‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!</b>\n\n"
            f"üì¶ –£—Å–ª—É–≥–∞: <b>{service['name']}</b>\n"
            f"‚è± –°—Ä–æ–∫: {service['duration_days']} {unit_text}\n"
            f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {end_date.strftime('%d.%m.%Y %H:%M')}\n\n"
            f"üëá –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –∫–∞–Ω–∞–ª—É:",
            parse_mode="HTML",
            reply_markup=keyboard
        )
        logging.info(f"‚úÖ Notification sent to user {purchase['user_id']}")
        
    except Exception as e:
        logging.error(f"‚ùå Failed to send notification to user: {e}")
        await callback.message.edit_text(
            f"‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∏ —Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —é–∑–µ—Ä—É:\n{e}"
        )
        return
    
    # 4. –£–î–ê–õ–Ø–ï–ú –ó–ê–Ø–í–ö–£ –ò–ó –ë–î
    await db.delete_pending_purchase(purchase_id)
    
    # 5. –£–í–ï–î–û–ú–õ–Ø–ï–ú –ê–î–ú–ò–ù–ê –û–ë –£–°–ü–ï–•–ï
    await callback.message.edit_text(
        f"‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!</b>\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{purchase['username']}\n"
        f"üì¶ –£—Å–ª—É–≥–∞: {service['name']}\n"
        f"üìÖ –î–æ: {end_date.strftime('%d.%m.%Y %H:%M')}\n"
        f"üîó –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
        parse_mode="HTML"
    )
    
    logging.info(f"‚úÖ Purchase {purchase_id} approved successfully!")


@dp.callback_query(F.data.startswith("reject_"))
async def reject_purchase(callback: types.CallbackQuery):
    """Reject purchase request"""
    await callback.answer()
    
    purchase_id = int(callback.data.replace("reject_", ""))
    purchase = await db.get_pending_purchase(purchase_id)
    
    if not purchase:
        await callback.message.edit_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    await db.delete_pending_purchase(purchase_id)
    
    try:
        await user_sender_bot.send_message(
            purchase['user_id'],
            "‚ùå <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.</b>\n\n"
            "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —á–µ—Ä–µ–∑ /start ‚Üí –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º",
            parse_mode="HTML"
        )
    except Exception as e:
        logging.error(f"Failed to send rejection notice: {e}")
    
    await callback.message.edit_text(f"‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –¥–ª—è @{purchase['username']}")


async def main():
    """Main function to run admin bot"""
    await db.init_db()
    logging.info("Admin bot started")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())append(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è info –±–æ—Ç–∞: {e}")
    
    try:
        chat = await bot.get_chat(PRIVATE_CHANNEL_ID)
        issues.append(f"‚úÖ –ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω: {chat.title}")
        issues.append(f"   –¢–∏–ø: {chat.type}")
    except Exception as e:
        issues.append(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É: {e}")
    
    try:
        member = await bot.get_chat_member(PRIVATE_CHANNEL_ID, (await bot.get_me()).id)
        issues.append(f"‚úÖ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ: {member.status}")
        
        if member.status == "administrator":
            perms = member.can_invite_users
            issues.append(f"   –ü—Ä–∞–≤–∞ –Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ: {'‚úÖ' if perms else '‚ùå'}")
        else:
            issues.append(f"   ‚ö†Ô∏è –ë–æ—Ç –Ω–µ –∞–¥–º–∏–Ω –∫–∞–Ω–∞–ª–∞!")
    except Exception as e:
        issues.
